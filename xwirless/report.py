"""
Report generation module for various output formats.
"""

import json
import csv
import logging
from typing import Dict, Any, Optional
from datetime import datetime
from pathlib import Path
import requests

from .parser import ScanResult, WiFiNetwork
from .utils import get_version_info

logger = logging.getLogger(__name__)

class ReportGenerator:
    """Generate reports in various formats."""
    
    def __init__(self, author_badge: bool = True):
        self.author_badge = author_badge
        self.version_info = get_version_info()
    
    def generate_json_report(self, scan_result: ScanResult, output_file: Optional[str] = None) -> str:
        """Generate JSON report."""
        report_data = {
            "metadata": self._get_metadata(),
            "scan_info": {
                "timestamp": scan_result.timestamp.isoformat(),
                "interface": scan_result.interface,
                "total_networks": scan_result.total_networks,
                "scan_duration": scan_result.scan_duration
            },
            "networks": [network.dict() for network in scan_result.networks]
        }
        
        json_output = json.dumps(report_data, indent=2, ensure_ascii=False)
        
        if output_file:
            Path(output_file).write_text(json_output, encoding='utf-8')
            logger.info(f"JSON report saved to: {output_file}")
        
        return json_output
    
    def generate_markdown_report(self, scan_result: ScanResult, output_file: Optional[str] = None) -> str:
        """Generate Markdown report."""
        md_lines = []
        
        # Header
        md_lines.append("# X WIRELESS - Wi-Fi Scan Report")
        md_lines.append("")
        
        if self.author_badge:
            md_lines.append("**Created by Adil Fayyaz**  ")
            md_lines.append("**Follow on Instagram: @Infinityx_20257**")
            md_lines.append("")
        
        # Metadata
        md_lines.append("## Scan Information")
        md_lines.append("")
        md_lines.append(f"- **Timestamp**: {scan_result.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}")
        md_lines.append(f"- **Interface**: {scan_result.interface}")
        md_lines.append(f"- **Total Networks**: {scan_result.total_networks}")
        if scan_result.scan_duration:
            md_lines.append(f"- **Scan Duration**: {scan_result.scan_duration:.2f} seconds")
        md_lines.append(f"- **Tool Version**: {self.version_info['version']}")
        md_lines.append("")
        
        # Networks table
        md_lines.append("## Discovered Networks")
        md_lines.append("")
        md_lines.append("| SSID | BSSID | Channel | Signal | Encryption | Cipher |")
        md_lines.append("|------|-------|---------|--------|------------|--------|")
        
        for network in scan_result.networks:
            ssid = network.ssid if network.ssid != "Hidden" else "*Hidden*"
            md_lines.append(
                f"| {ssid} | {network.bssid} | {network.channel} | "
                f"{network.signal_level} dBm | {network.encryption} | "
                f"{network.cipher or 'N/A'} |"
            )
        
        md_lines.append("")
        
        # Summary
        md_lines.append("## Summary")
        md_lines.append("")
        encryption_stats = self._get_encryption_stats(scan_result.networks)
        for enc_type, count in encryption_stats.items():
            md_lines.append(f"- **{enc_type}**: {count} networks")
        
        md_lines.append("")
        md_lines.append("---")
        md_lines.append("*Report generated by X WIRELESS - Educational use only*")
        
        md_output = "\n".join(md_lines)
        
        if output_file:
            Path(output_file).write_text(md_output, encoding='utf-8')
            logger.info(f"Markdown report saved to: {output_file}")
        
        return md_output
    
    def generate_csv_report(self, scan_result: ScanResult, output_file: Optional[str] = None) -> str:
        """Generate CSV report."""
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Header
        writer.writerow([
            "SSID", "BSSID", "Channel", "Frequency", "Signal_Level", 
            "Quality", "Encryption", "Cipher", "Authentication", 
            "Protocol", "Mode"
        ])
        
        # Data rows
        for network in scan_result.networks:
            writer.writerow([
                network.ssid,
                network.bssid,
                network.channel,
                network.frequency,
                network.signal_level,
                network.quality,
                network.encryption,
                network.cipher or "",
                network.authentication or "",
                network.protocol,
                network.mode
            ])
        
        csv_output = output.getvalue()
        output.close()
        
        if output_file:
            Path(output_file).write_text(csv_output, encoding='utf-8')
            logger.info(f"CSV report saved to: {output_file}")
        
        return csv_output
    
    def upload_to_gist(self, content: str, filename: str, token: str, description: str = "X WIRELESS Scan Report") -> Optional[str]:
        """Upload report to GitHub Gist."""
        try:
            gist_data = {
                "description": description,
                "public": False,
                "files": {
                    filename: {
                        "content": content
                    }
                }
            }
            
            headers = {
                "Authorization": f"token {token}",
                "Accept": "application/vnd.github.v3+json"
            }
            
            response = requests.post(
                "https://api.github.com/gists",
                json=gist_data,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 201:
                gist_info = response.json()
                gist_url = gist_info["html_url"]
                logger.info(f"Report uploaded to Gist: {gist_url}")
                return gist_url
            else:
                logger.error(f"Gist upload failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"Error uploading to Gist: {e}")
            return None
    
    def _get_metadata(self) -> Dict[str, Any]:
        """Get report metadata."""
        return {
            "tool": "X WIRELESS",
            "version": self.version_info["version"],
            "author": self.version_info["author"],
            "generated_at": datetime.utcnow().isoformat(),
            "educational_use_only": True
        }
    
    def _get_encryption_stats(self, networks: list) -> Dict[str, int]:
        """Get encryption type statistics."""
        stats = {}
        for network in networks:
            enc_type = network.encryption
            stats[enc_type] = stats.get(enc_type, 0) + 1
        return stats